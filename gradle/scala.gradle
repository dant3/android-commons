apply plugin: 'scala'

// --- plugin definition --- //
project.extensions.create("scala", ScalaConfiguration)
// --- addOn sourceSets
scala {
    version '2.11.4'
}

DependencyHandler.metaClass.scalaLang = {
    "org.scala-lang:scala-library:${project.scala.version.lang}"
}
DependencyHandler.metaClass.scalaCompiler = {
    "org.scala-lang:scala-compiler:${project.scala.version.lang}"
}
DependencyHandler.metaClass.scalaJLine = { "org.scala-lang:jline:${scala.version.lang}" }
DependencyHandler.metaClass.scalaLibrary = { String group, String name, String version ->
    [group: group, name: name + '_' + project.scala.version.major, version: version]
}
DependencyHandler.metaClass.scalaLibrary = { Map dependency ->
    delegate.scalaLibrary(dependency.group, dependency.name, dependency.version)
}
DependencyHandler.metaClass.scalaLibrary = { String moduleString ->
    def modPieces = moduleString.split(':')
    delegate.scalaLibrary(modPieces[0], modPieces[1], modPieces[2])
}

configurations.create('scalaConsole')
configurations.scalaConsole {
    transitive = true
    description = "Libraries that will be added to classpath when running scalaConsole"
    extendsFrom = [configurations.runtime]
}

configurations.create('scalaTestConsole')
configurations.scalaTestConsole {
    transitive = true
    description = "Libraries that will be added to classpath when running scalaTestConsole"
    extendsFrom = [configurations.scalaConsole]
}

// --- tasks --- //
task scalaConsole(type: JavaExec, dependsOn: classes, overwrite: true) {
    main = 'scala.tools.nsc.MainGenericRunner'
    systemProperty("scala.usejavacp", true)
    standardInput = System.in
    classpath = configurations.scalaConsole + configurations.runtime + sourceSets.main.output
    conventionMapping.jvmArgs = { ["-classpath", classpath] }
}

task scalaTestConsole(type: JavaExec, dependsOn: [classes,testClasses], overwrite: true) {
    main = 'scala.tools.nsc.MainGenericRunner'
    systemProperty("scala.usejavacp", true)
    standardInput = System.in
    classpath = configurations.scalaTestConsole + configurations.runtime + sourceSets.main.output + sourceSets.test.output
    conventionMapping.jvmArgs = { ["-classpath", classpath] }
}

// -- after reading user settings -- //
afterEvaluate {
    dependencies {
        scalaConsole scalaCompiler()
        scalaConsole scalaLang()
        scalaConsole scalaJLine()
        scalaTestConsole scalaCompiler()
        scalaTestConsole scalaLang()
        scalaTestConsole scalaJLine()
    }
}
// --- plugin implementation --- //

class ScalaConfiguration {
    private ScalaVersion _version;
    void version(String versionString) { _version = new ScalaVersion(versionString) }
    ScalaVersion getVersion() { _version }
}

class ScalaVersion {
    final String major
    final String patch
    final String lang

    ScalaVersion(String version) {
        this.lang = version
        def versionPieces = version.split("\\.")
        if (versionPieces.size() != 3) {
            throw new IllegalArgumentException("Illegal scala version $version")
        }

        major = versionPieces[0] + '.' + versionPieces[1]
        patch = versionPieces[2]
    }
}
